org: ribery93
app: capstone-goal-app
# # GOAL: Change the name of the org
# # Updated By Sayed Atef
service: capstone-goal-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PROJECT_NAME: capstone-goal-app
    GOALS_TABLE: goal-backend-table-${self:provider.stage}
    S3_BUCKET_NAME: goal-bucket-${self:provider.stage}

  tracing:
    lambda: true
    apiGateway: true

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    documentation:
      api:
        info:
          version: '1.0.0'
          title: Goal API
          description: Serverless goal application

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetGoals:
    handler: src/lambda/http/getGoals.handler
    events:
      - http:
          method: get
          path: goals
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-getgoal-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GOALS_TABLE}

  CreateGoal:
    handler: src/lambda/http/createGoal.handler
    events:
      - http:
          method: post
          path: goals
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-goal-model.json)}
          documentation:
            summary: 'Create a new item'
            description: 'Create a new item'
            requestModels:
              'application/json': CreateGoalRequest
          reqValidatorName: onlyBody
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-creategoal-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GOALS_TABLE}

  UpdateGoal:
    handler: src/lambda/http/updateGoal.handler
    events:
      - http:
          method: patch
          path: goals/{goalId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-goal-model.json)}
          documentation:
            summary: 'Update an item'
            description: 'Update an item'
            requestModels:
              'application/json': UpdateGoalRequest
          reqValidatorName: onlyBody
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-updategoal-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GOALS_TABLE}

  DeleteGoal:
    handler: src/lambda/http/deleteGoal.handler
    events:
      - http:
          method: delete
          path: goals/{goalId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-deletegoal-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GOALS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: goals/{goalId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-s3upload-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*

resources:
  Resources:
    GoalsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: goalId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: goalId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GOALS_TABLE}
    onlyBody:
      Type: 'AWS::ApiGateway::RequestValidator'
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*'
        Bucket: !Ref AttachmentsBucket
